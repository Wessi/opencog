
; DO NOT EDIT THIS FILE! This file was automatically
; generated from atom definitions in types.script by the macro OPENCOG_ADD_ATOM_TYPES
;
; This file contains basic scheme wrappers for atom creation.
;
(define-module (opencog))
(define-public NotypeType (cog-type->int 'Notype))
(define-public (Notype . x)
	(apply cog-new-link (append (list NotypeType) x)))
(define-public AtomType (cog-type->int 'Atom))
(define-public (Atom . x)
	(apply cog-new-link (append (list AtomType) x)))
(define-public NodeType (cog-type->int 'Node))
(define-public (Node . x)
	(apply cog-new-node (append (list NodeType) x)))
(define-public LinkType (cog-type->int 'Link))
(define-public (Link . x)
	(apply cog-new-link (append (list LinkType) x)))
(define-public ConceptNodeType (cog-type->int 'ConceptNode))
(define-public (ConceptNode . x)
	(apply cog-new-node (append (list ConceptNodeType) x)))
(define-public NumberNodeType (cog-type->int 'NumberNode))
(define-public (NumberNode . x)
	(apply cog-new-node (append (list NumberNodeType) x)))
(define-public OrderedLinkType (cog-type->int 'OrderedLink))
(define-public (OrderedLink . x)
	(apply cog-new-link (append (list OrderedLinkType) x)))
(define-public UnorderedLinkType (cog-type->int 'UnorderedLink))
(define-public (UnorderedLink . x)
	(apply cog-new-link (append (list UnorderedLinkType) x)))
(define-public SetLinkType (cog-type->int 'SetLink))
(define-public (SetLink . x)
	(apply cog-new-link (append (list SetLinkType) x)))
(define-public ListLinkType (cog-type->int 'ListLink))
(define-public (ListLink . x)
	(apply cog-new-link (append (list ListLinkType) x)))
(define-public MemberLinkType (cog-type->int 'MemberLink))
(define-public (MemberLink . x)
	(apply cog-new-link (append (list MemberLinkType) x)))
(define-public SubsetLinkType (cog-type->int 'SubsetLink))
(define-public (SubsetLink . x)
	(apply cog-new-link (append (list SubsetLinkType) x)))
(define-public AndLinkType (cog-type->int 'AndLink))
(define-public (AndLink . x)
	(apply cog-new-link (append (list AndLinkType) x)))
(define-public OrLinkType (cog-type->int 'OrLink))
(define-public (OrLink . x)
	(apply cog-new-link (append (list OrLinkType) x)))
(define-public NotLinkType (cog-type->int 'NotLink))
(define-public (NotLink . x)
	(apply cog-new-link (append (list NotLinkType) x)))
(define-public SequentialAndLinkType (cog-type->int 'SequentialAndLink))
(define-public (SequentialAndLink . x)
	(apply cog-new-link (append (list SequentialAndLinkType) x)))
(define-public AbsentLinkType (cog-type->int 'AbsentLink))
(define-public (AbsentLink . x)
	(apply cog-new-link (append (list AbsentLinkType) x)))
(define-public ContextLinkType (cog-type->int 'ContextLink))
(define-public (ContextLink . x)
	(apply cog-new-link (append (list ContextLinkType) x)))
(define-public TypeNodeType (cog-type->int 'TypeNode))
(define-public (TypeNode . x)
	(apply cog-new-node (append (list TypeNodeType) x)))
(define-public TypeChoiceType (cog-type->int 'TypeChoice))
(define-public (TypeChoice . x)
	(apply cog-new-link (append (list TypeChoiceType) x)))
(define-public VariableNodeType (cog-type->int 'VariableNode))
(define-public (VariableNode . x)
	(apply cog-new-node (append (list VariableNodeType) x)))
(define-public TypedVariableLinkType (cog-type->int 'TypedVariableLink))
(define-public (TypedVariableLink . x)
	(apply cog-new-link (append (list TypedVariableLinkType) x)))
(define-public VariableListType (cog-type->int 'VariableList))
(define-public (VariableList . x)
	(apply cog-new-link (append (list VariableListType) x)))
(define-public QuoteLinkType (cog-type->int 'QuoteLink))
(define-public (QuoteLink . x)
	(apply cog-new-link (append (list QuoteLinkType) x)))
(define-public LambdaLinkType (cog-type->int 'LambdaLink))
(define-public (LambdaLink . x)
	(apply cog-new-link (append (list LambdaLinkType) x)))
(define-public DefineLinkType (cog-type->int 'DefineLink))
(define-public (DefineLink . x)
	(apply cog-new-link (append (list DefineLinkType) x)))
(define-public ComposeLinkType (cog-type->int 'ComposeLink))
(define-public (ComposeLink . x)
	(apply cog-new-link (append (list ComposeLinkType) x)))
(define-public SatisfactionLinkType (cog-type->int 'SatisfactionLink))
(define-public (SatisfactionLink . x)
	(apply cog-new-link (append (list SatisfactionLinkType) x)))
(define-public BindLinkType (cog-type->int 'BindLink))
(define-public (BindLink . x)
	(apply cog-new-link (append (list BindLinkType) x)))
(define-public ForAllLinkType (cog-type->int 'ForAllLink))
(define-public (ForAllLink . x)
	(apply cog-new-link (append (list ForAllLinkType) x)))
(define-public ExistsLinkType (cog-type->int 'ExistsLink))
(define-public (ExistsLink . x)
	(apply cog-new-link (append (list ExistsLinkType) x)))
(define-public AverageLinkType (cog-type->int 'AverageLink))
(define-public (AverageLink . x)
	(apply cog-new-link (append (list AverageLinkType) x)))
(define-public SatisfyingSetLinkType (cog-type->int 'SatisfyingSetLink))
(define-public (SatisfyingSetLink . x)
	(apply cog-new-link (append (list SatisfyingSetLinkType) x)))
(define-public ScholemLinkType (cog-type->int 'ScholemLink))
(define-public (ScholemLink . x)
	(apply cog-new-link (append (list ScholemLinkType) x)))
(define-public ImplicationLinkType (cog-type->int 'ImplicationLink))
(define-public (ImplicationLink . x)
	(apply cog-new-link (append (list ImplicationLinkType) x)))
(define-public EquivalenceLinkType (cog-type->int 'EquivalenceLink))
(define-public (EquivalenceLink . x)
	(apply cog-new-link (append (list EquivalenceLinkType) x)))
(define-public EvaluationLinkType (cog-type->int 'EvaluationLink))
(define-public (EvaluationLink . x)
	(apply cog-new-link (append (list EvaluationLinkType) x)))
(define-public AssociativeLinkType (cog-type->int 'AssociativeLink))
(define-public (AssociativeLink . x)
	(apply cog-new-link (append (list AssociativeLinkType) x)))
(define-public InheritanceLinkType (cog-type->int 'InheritanceLink))
(define-public (InheritanceLink . x)
	(apply cog-new-link (append (list InheritanceLinkType) x)))
(define-public SimilarityLinkType (cog-type->int 'SimilarityLink))
(define-public (SimilarityLink . x)
	(apply cog-new-link (append (list SimilarityLinkType) x)))
(define-public AttractionLinkType (cog-type->int 'AttractionLink))
(define-public (AttractionLink . x)
	(apply cog-new-link (append (list AttractionLinkType) x)))
(define-public ProcedureNodeType (cog-type->int 'ProcedureNode))
(define-public (ProcedureNode . x)
	(apply cog-new-node (append (list ProcedureNodeType) x)))
(define-public GroundedProcedureNodeType (cog-type->int 'GroundedProcedureNode))
(define-public (GroundedProcedureNode . x)
	(apply cog-new-node (append (list GroundedProcedureNodeType) x)))
(define-public SchemaNodeType (cog-type->int 'SchemaNode))
(define-public (SchemaNode . x)
	(apply cog-new-node (append (list SchemaNodeType) x)))
(define-public GroundedSchemaNodeType (cog-type->int 'GroundedSchemaNode))
(define-public (GroundedSchemaNode . x)
	(apply cog-new-node (append (list GroundedSchemaNodeType) x)))
(define-public PredicateNodeType (cog-type->int 'PredicateNode))
(define-public (PredicateNode . x)
	(apply cog-new-node (append (list PredicateNodeType) x)))
(define-public GroundedPredicateNodeType (cog-type->int 'GroundedPredicateNode))
(define-public (GroundedPredicateNode . x)
	(apply cog-new-node (append (list GroundedPredicateNodeType) x)))
(define-public DefinedRelationshipNodeType (cog-type->int 'DefinedRelationshipNode))
(define-public (DefinedRelationshipNode . x)
	(apply cog-new-node (append (list DefinedRelationshipNodeType) x)))
(define-public SchemaExecutionLinkType (cog-type->int 'SchemaExecutionLink))
(define-public (SchemaExecutionLink . x)
	(apply cog-new-link (append (list SchemaExecutionLinkType) x)))
(define-public SchemaEvaluationLinkType (cog-type->int 'SchemaEvaluationLink))
(define-public (SchemaEvaluationLink . x)
	(apply cog-new-link (append (list SchemaEvaluationLinkType) x)))
(define-public ExecutionLinkType (cog-type->int 'ExecutionLink))
(define-public (ExecutionLink . x)
	(apply cog-new-link (append (list ExecutionLinkType) x)))
(define-public ExecutionOutputLinkType (cog-type->int 'ExecutionOutputLink))
(define-public (ExecutionOutputLink . x)
	(apply cog-new-link (append (list ExecutionOutputLinkType) x)))
(define-public AnchorNodeType (cog-type->int 'AnchorNode))
(define-public (AnchorNode . x)
	(apply cog-new-node (append (list AnchorNodeType) x)))
(define-public QuantityLinkType (cog-type->int 'QuantityLink))
(define-public (QuantityLink . x)
	(apply cog-new-link (append (list QuantityLinkType) x)))
(define-public PlusLinkType (cog-type->int 'PlusLink))
(define-public (PlusLink . x)
	(apply cog-new-link (append (list PlusLinkType) x)))
(define-public TimesLinkType (cog-type->int 'TimesLink))
(define-public (TimesLink . x)
	(apply cog-new-link (append (list TimesLinkType) x)))
(define-public GreaterThanLinkType (cog-type->int 'GreaterThanLink))
(define-public (GreaterThanLink . x)
	(apply cog-new-link (append (list GreaterThanLinkType) x)))
