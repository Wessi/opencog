
; DO NOT EDIT THIS FILE! This file was automatically
; generated from atom definitions in types.script by the macro OPENCOG_ADD_ATOM_TYPES
;
; This file contains basic scheme wrappers for atom creation.
;
(define-module (opencog))
(define-public PetNodeType (cog-type->int 'PetNode))
(define-public (PetNode . x)
	(apply cog-new-node (append (list PetNodeType) x)))
(define-public AvatarNodeType (cog-type->int 'AvatarNode))
(define-public (AvatarNode . x)
	(apply cog-new-node (append (list AvatarNodeType) x)))
(define-public AccessoryNodeType (cog-type->int 'AccessoryNode))
(define-public (AccessoryNode . x)
	(apply cog-new-node (append (list AccessoryNodeType) x)))
(define-public HumanoidNodeType (cog-type->int 'HumanoidNode))
(define-public (HumanoidNode . x)
	(apply cog-new-node (append (list HumanoidNodeType) x)))
(define-public UnknownObjectNodeType (cog-type->int 'UnknownObjectNode))
(define-public (UnknownObjectNode . x)
	(apply cog-new-node (append (list UnknownObjectNodeType) x)))
(define-public IsAcceptableSecondArgLinkType (cog-type->int 'IsAcceptableSecondArgLink))
(define-public (IsAcceptableSecondArgLink . x)
	(apply cog-new-link (append (list IsAcceptableSecondArgLinkType) x)))
(define-public OntologicalInheritanceLinkType (cog-type->int 'OntologicalInheritanceLink))
(define-public (OntologicalInheritanceLink . x)
	(apply cog-new-link (append (list OntologicalInheritanceLinkType) x)))
(define-public WRLinkType (cog-type->int 'WRLink))
(define-public (WRLink . x)
	(apply cog-new-link (append (list WRLinkType) x)))
(define-public FrequencyLinkType (cog-type->int 'FrequencyLink))
(define-public (FrequencyLink . x)
	(apply cog-new-link (append (list FrequencyLinkType) x)))
(define-public FeelingNodeType (cog-type->int 'FeelingNode))
(define-public (FeelingNode . x)
	(apply cog-new-node (append (list FeelingNodeType) x)))
(define-public PhraseNodeType (cog-type->int 'PhraseNode))
(define-public (PhraseNode . x)
	(apply cog-new-node (append (list PhraseNodeType) x)))
(define-public SpeechActTriggerNodeType (cog-type->int 'SpeechActTriggerNode))
(define-public (SpeechActTriggerNode . x)
	(apply cog-new-node (append (list SpeechActTriggerNodeType) x)))
(define-public SpeechActSchemaNodeType (cog-type->int 'SpeechActSchemaNode))
(define-public (SpeechActSchemaNode . x)
	(apply cog-new-node (append (list SpeechActSchemaNodeType) x)))
(define-public DialogNodeType (cog-type->int 'DialogNode))
(define-public (DialogNode . x)
	(apply cog-new-node (append (list DialogNodeType) x)))
(define-public UtteranceNodeType (cog-type->int 'UtteranceNode))
(define-public (UtteranceNode . x)
	(apply cog-new-node (append (list UtteranceNodeType) x)))
(define-public DefinedFrameNodeType (cog-type->int 'DefinedFrameNode))
(define-public (DefinedFrameNode . x)
	(apply cog-new-node (append (list DefinedFrameNodeType) x)))
(define-public DefinedFrameElementNodeType (cog-type->int 'DefinedFrameElementNode))
(define-public (DefinedFrameElementNode . x)
	(apply cog-new-node (append (list DefinedFrameElementNodeType) x)))
(define-public FrameElementLinkType (cog-type->int 'FrameElementLink))
(define-public (FrameElementLink . x)
	(apply cog-new-link (append (list FrameElementLinkType) x)))
(define-public SimultaneousEquivalenceLinkType (cog-type->int 'SimultaneousEquivalenceLink))
(define-public (SimultaneousEquivalenceLink . x)
	(apply cog-new-link (append (list SimultaneousEquivalenceLinkType) x)))
