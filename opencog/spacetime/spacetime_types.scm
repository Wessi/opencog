
; DO NOT EDIT THIS FILE! This file was automatically
; generated from atom definitions in types.script by the macro OPENCOG_ADD_ATOM_TYPES
;
; This file contains basic scheme wrappers for atom creation.
;
(define-module (opencog))
(define-public SpaceMapNodeType (cog-type->int 'SpaceMapNode))
(define-public (SpaceMapNode . x)
	(apply cog-new-node (append (list SpaceMapNodeType) x)))
(define-public ObjectNodeType (cog-type->int 'ObjectNode))
(define-public (ObjectNode . x)
	(apply cog-new-node (append (list ObjectNodeType) x)))
(define-public BlockEntityNodeType (cog-type->int 'BlockEntityNode))
(define-public (BlockEntityNode . x)
	(apply cog-new-node (append (list BlockEntityNodeType) x)))
(define-public StructureNodeType (cog-type->int 'StructureNode))
(define-public (StructureNode . x)
	(apply cog-new-node (append (list StructureNodeType) x)))
(define-public ImaginaryStructureNodeType (cog-type->int 'ImaginaryStructureNode))
(define-public (ImaginaryStructureNode . x)
	(apply cog-new-node (append (list ImaginaryStructureNodeType) x)))
(define-public TimeNodeType (cog-type->int 'TimeNode))
(define-public (TimeNode . x)
	(apply cog-new-node (append (list TimeNodeType) x)))
(define-public AtTimeLinkType (cog-type->int 'AtTimeLink))
(define-public (AtTimeLink . x)
	(apply cog-new-link (append (list AtTimeLinkType) x)))
(define-public LatestLinkType (cog-type->int 'LatestLink))
(define-public (LatestLink . x)
	(apply cog-new-link (append (list LatestLinkType) x)))
(define-public BeforeLinkType (cog-type->int 'BeforeLink))
(define-public (BeforeLink . x)
	(apply cog-new-link (append (list BeforeLinkType) x)))
(define-public OverlapsLinkType (cog-type->int 'OverlapsLink))
(define-public (OverlapsLink . x)
	(apply cog-new-link (append (list OverlapsLinkType) x)))
(define-public DuringLinkType (cog-type->int 'DuringLink))
(define-public (DuringLink . x)
	(apply cog-new-link (append (list DuringLinkType) x)))
(define-public MeetsLinkType (cog-type->int 'MeetsLink))
(define-public (MeetsLink . x)
	(apply cog-new-link (append (list MeetsLinkType) x)))
(define-public StartsLinkType (cog-type->int 'StartsLink))
(define-public (StartsLink . x)
	(apply cog-new-link (append (list StartsLinkType) x)))
(define-public FinishesLinkType (cog-type->int 'FinishesLink))
(define-public (FinishesLink . x)
	(apply cog-new-link (append (list FinishesLinkType) x)))
(define-public EqualsLinkType (cog-type->int 'EqualsLink))
(define-public (EqualsLink . x)
	(apply cog-new-link (append (list EqualsLinkType) x)))
(define-public AfterLinkType (cog-type->int 'AfterLink))
(define-public (AfterLink . x)
	(apply cog-new-link (append (list AfterLinkType) x)))
(define-public OverlappedByLinkType (cog-type->int 'OverlappedByLink))
(define-public (OverlappedByLink . x)
	(apply cog-new-link (append (list OverlappedByLinkType) x)))
(define-public ContainsLinkType (cog-type->int 'ContainsLink))
(define-public (ContainsLink . x)
	(apply cog-new-link (append (list ContainsLinkType) x)))
(define-public MetByLinkType (cog-type->int 'MetByLink))
(define-public (MetByLink . x)
	(apply cog-new-link (append (list MetByLinkType) x)))
(define-public StartedByLinkType (cog-type->int 'StartedByLink))
(define-public (StartedByLink . x)
	(apply cog-new-link (append (list StartedByLinkType) x)))
(define-public FinishedByLinkType (cog-type->int 'FinishedByLink))
(define-public (FinishedByLink . x)
	(apply cog-new-link (append (list FinishedByLinkType) x)))
