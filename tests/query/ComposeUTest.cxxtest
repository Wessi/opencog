/*
 * tests/query/ComposeUTest.cxxtest
 *
 * Copyright (C) 2015 Linas Vepstas
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/guile/load-file.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/guile/SchemeSmob.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/server/CogServer.h>
#include <opencog/atoms/bind/ComposeLink.h>
#include <opencog/atoms/bind/DefineLink.h>
#include <opencog/util/Config.h>
#include <opencog/util/Logger.h>

using namespace opencog;

class ComposeUTest: public CxxTest::TestSuite
{
private:
	AtomSpace *as;
	SchemeEval* eval;

public:
	ComposeUTest(void)
	{
		try
		{
			 config().load("opencog-test.conf");
		}
		catch (RuntimeException &e)
		{
			std::cerr << e.getMessage() << std::endl;
		}
		logger().setFilename(config()["LOG_FILE"]);
		logger().setLevel(Logger::getLevelFromString(config()["LOG_LEVEL"]));
		logger().setPrintToStdoutFlag(config().get_bool("LOG_TO_STDOUT"));

		server(CogServer::createInstance);
		as = &cogserver().getAtomSpace();
		eval = new SchemeEval(as);

		config().set("SCM_PRELOAD",
			"opencog/atomspace/core_types.scm, "
			"opencog/scm/utilities.scm");

		load_scm_files_from_config(*as);

		config().set("MODULES",
			"opencog/query/libQueryModule.so");

		cogserver().loadModules();

		config().set("SCM_PRELOAD", "tests/query/compose.scm");
		load_scm_files_from_config(*as);

	}

	~ComposeUTest()
	{
		delete as;
		// Erase the log file if no assertions failed.
		if (!CxxTest::TestTracker::tracker().suiteFailed())
				std::remove(logger().getFilename().c_str());
	}

	void setUp(void);
	void tearDown(void);

	void test_double_define(void);
	void test_simple_compose(void);
	void test_quote_compose(void);
};

void ComposeUTest::tearDown(void)
{
}

void ComposeUTest::setUp(void)
{
}

/*
 * Test double-definition of a DefineLink.  Double definitions
 * should not be posible.
 */
void ComposeUTest::test_double_define(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	Handle defun_a = eval->eval_h("(defun-a)");
	TSM_ASSERT("Failed to load definition", defun_a != Handle::UNDEFINED);

	// Disable logging to avoid dreck on stdout
	logger().setLevel(Logger::NONE);

	// Inserting a second atom with the same name should throw.
	bool caught = false;
	try
	{
		Handle defun_b = eval->eval_h("(defun-b)");
	}
	catch (const RuntimeException& ex)
	{
		caught = true;
	}
	logger().setLevel(Logger::DEBUG);
	TSM_ASSERT("Failed to catch exception", caught == true);

	// Inserting the same atom a second time should be harmless.
	Handle refun = eval->eval_h("(defun-a)");
	TSM_ASSERT("Failed to reload definition", defun_a == refun);

	logger().debug("END TEST: %s", __FUNCTION__);
}

/*
 * Basic ComposeLink unit test.
 */
void ComposeUTest::test_simple_compose(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	Handle hdef = eval->eval_h("(defun-a)");
	printf("Get a defintion: %s\n", hdef->toString().c_str());
	DefineLinkPtr defun = DefineLinkCast(hdef);
	TSM_ASSERT("Exepected to get a definion", defun != NULL);

	Handle hcomp = eval->eval_h("composer");
	printf("Get a composer: %s\n", hcomp->toString().c_str());
	ComposeLinkPtr compr = ComposeLinkCast(hcomp);
	TSM_ASSERT("Exepected to get a ComposeLink", compr != NULL);

	Handle hresult = compr->compose();
	// We must place it in the atomspace, the composer doesn't do that.
	hresult = as->getAtom(hresult);
	printf("Got the result: %s\n", hresult->toString().c_str());

	Handle hexpected = eval->eval_h("bogo-a");
	TSM_ASSERT("Exepected to get desired result", hresult == hexpected);
	logger().debug("END TEST: %s", __FUNCTION__);
}
/*
 * ComposeLink with QuoteLink in it
 */
void ComposeUTest::test_quote_compose(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	Handle hdef = eval->eval_h("(defun-quote)");
	printf("Get a defintion: %s\n", hdef->toString().c_str());
	DefineLinkPtr defun = DefineLinkCast(hdef);
	TSM_ASSERT("Exepected to get a definion", defun != NULL);

	Handle hcomp = eval->eval_h("compose-quote");
	printf("Get a composer: %s\n", hcomp->toString().c_str());
	ComposeLinkPtr compr = ComposeLinkCast(hcomp);
	TSM_ASSERT("Exepected to get a ComposeLink", compr != NULL);

	Handle hresult = compr->compose();
	// We must place it in the atomspace, the composer doesn't do that.
	hresult = as->getAtom(hresult);
	printf("Got the result: %s\n", hresult->toString().c_str());

	Handle hexpected = eval->eval_h("yeah-quote");
	TSM_ASSERT("Exepected to get desired result", hresult == hexpected);
	logger().debug("END TEST: %s", __FUNCTION__);
}
