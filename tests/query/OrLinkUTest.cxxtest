/*
 * tests/query/OrLinkUTest.cxxtest
 *
 * Copyright (C) 2015 Linas Vepstas
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <opencog/guile/load-file.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/guile/SchemeSmob.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/server/CogServer.h>
#include <opencog/query/BindLink.h>
#include <opencog/util/Config.h>
#include <opencog/util/Logger.h>

using namespace opencog;

class OrLinkUTest: public CxxTest::TestSuite
{
private:
        AtomSpace *as;
        SchemeEval* eval;

public:
    OrLinkUTest(void)
    {
        try
        {
             config().load("opencog-test.conf");
        }
        catch (RuntimeException &e)
        {
            std::cerr << e.getMessage() << std::endl;
        }
        logger().setFilename(config()["LOG_FILE"]);
        logger().setLevel(Logger::getLevelFromString(config()["LOG_LEVEL"]));
        logger().setPrintToStdoutFlag(config().get_bool("LOG_TO_STDOUT"));

        server(CogServer::createInstance);
        as = &cogserver().getAtomSpace();
        eval = new SchemeEval(as);

        config().set("MODULES",
            "opencog/query/libQueryModule.so");

        cogserver().loadModules();
    }

    ~OrLinkUTest()
    {
        delete eval;
        // Erase the log file if no assertions failed.
        if (!CxxTest::TestTracker::tracker().suiteFailed())
                std::remove(logger().getFilename().c_str());
    }

    void setUp(void);
    void tearDown(void);

    void test_basic_or(void);
};

void OrLinkUTest::tearDown(void)
{
    as->clear();
}

void OrLinkUTest::setUp(void)
{
    as->clear();
    config().set("SCM_PRELOAD",
        "opencog/atomspace/core_types.scm, "
        "opencog/scm/utilities.scm");

    load_scm_files_from_config(*as);
}

/*
 * OrLink most basic unit test.
 */
void OrLinkUTest::test_basic_or(void)
{
    logger().debug("BEGIN TEST: %s", __FUNCTION__);

    config().set("SCM_PRELOAD", "tests/query/or-link.scm");
    load_scm_files_from_config(*as);

    Handle items = eval->eval_h("(cog-bind (basic))");

// XXX FIXME disabled for now, since we are not yet code-complete
// on the implementation.
    // TS_ASSERT_EQUALS(2, as->getArity(items));
}
