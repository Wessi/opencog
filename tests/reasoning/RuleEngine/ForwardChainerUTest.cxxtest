/*
 * ForwardChainer.cxxtest
 *
 *  Created on: Sep 2, 2014
 *      Author: misgana
 */

#include <opencog/reasoning/RuleEngine/rule-engine-src/pln/ForwardChainer.h>
#include <opencog/reasoning/RuleEngine/rule-engine-src/pln/DefaultForwardChainerCB.h>
#include <opencog/reasoning/RuleEngine/rule-engine-src/pln/PLNCommons.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/guile/SchemeSmob.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/server/CogServer.h>
#include <opencog/util/Config.h>
#include <opencog/guile/load-file.h>

using namespace opencog;

class ForwardChainerUTest: public CxxTest::TestSuite {
private:
	ForwardChainer * fc_;
	AtomSpace * as_;
	const std::string find_node_test1;
public:
	ForwardChainerUTest()
	{
		server(CogServer::createInstance);
		as_ = &cogserver().getAtomSpace();
		as_->clear();
		config().set("SCM_PRELOAD",
		             "opencog/atomspace/core_types.scm, "
		             "opencog/scm/utilities.scm, "
		             "opencog/scm/av-tv.scm");
		config().set("MODULES", "opencog/query/libQueryModule.so");
		cogserver().loadModules();
		cogserver().loadSCMModules();
		load_scm_files_from_config(*as_);
		fc_ = new ForwardChainer(as_);
	}
	~ForwardChainerUTest() {
		delete as_;
	}
	void test_do_chain();
};

void ForwardChainerUTest::test_do_chain()
{
	// Test simple deduction
	//
	// InheritanceLink A B
	// InheritanceLink B C
	// |-
	// InheritanceLink A C
	Handle A = as_->addNode(CONCEPT_NODE, "A"),
		B = as_->addNode(CONCEPT_NODE, "B"),
		C = as_->addNode(CONCEPT_NODE, "C"),
		AB = as_->addLink(INHERITANCE_LINK, A, B),
		BC = as_->addLink(INHERITANCE_LINK, B, C);

	// Run forward chainer (and remove problematic rules)
	DefaultForwardChainerCB dfc(as_);
	vector<Rule*>& rules = fc_->fcmem_.rules_;
	for (auto it = rules.begin(); it != rules.end();) {
		if ((*it)->get_name() == "pln-rule-create-and-as-1st-arg-of-inheritance"
			or
		    (*it)->get_name() == "pln-rule-create-and-as-2nd-arg-of-inheritance"
		    or
		    (*it)->get_name() == "pln-rule-contextualize-inheritance")
			it = rules.erase(it);
		else
			++it;
	}
	fc_->do_chain(dfc, AB);

	// Collect the results
	HandleSeq results = fc_->get_chaining_result();
	std::cout << "do_chain results:" << std::endl;
	for (Handle h : results)
		std::cout << h->toString() << std::endl;

	// Check that AC is in the results
	Handle AC = as_->addLink(INHERITANCE_LINK, A, C);
	TS_ASSERT_DIFFERS(find(results.begin(), results.end(), AC), results.end());
}
